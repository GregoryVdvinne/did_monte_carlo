output <- left_join(output, true_effect, by = "term")
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
# #Estimate CS w/ conditioning on country
# output <- event_study(
#       yname = "revenue",
#       tname = "year",
#       idname = "id",
#       gname = "g",
#       estimator = "did",
#       xformla = ~ usa,
#       data = myData
#       )
#Add column for true effect to DF of estimates
output <- left_join(output, true_effect, by = "term")
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
View(output)
View(myData)
View(output)
gitcreds::gitcreds_set()
usethis::create_from_github("C:/Users/greg.vandervinne/OneDrive - Government of Alberta/R Projects", "https://github.com/Greg-VanderVinne_goa/EFP_Slidedecks.git")
usethis::create_from_github("https://github.com/Greg-VanderVinne_goa/EFP_Slidedecks.git",
"C:/Users/greg.vandervinne/OneDrive - Government of Alberta/R Projects"
)
gitcreds::gitcreds_set() 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
gitcreds::gitcreds_set()
### To do:
# Look into using map_dfr to bind multiple runs of the sim together
# Make own plotting function. Would include using summarise to average across sim runs
# Treatment that 'turns off'
#Clear memory
rm(list = ls(all=T))
#Load packages and install if not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,  # Grammar for data + ggplot2
did,        # Callaway and Sant'Anna
did2s,      # Gardner
data.table, # easy to make data tables
knitr       # Print pretty tables
)
#Set some output options
knitr::opts_chunk$set(include = TRUE, warning = FALSE, message = FALSE,
fig.width = 10, fig.height = 7)
my_event_study <- function(data, xformla = NULL, true_effect) {
rbind(
event_study(
yname = "revenue",
tname = "year",
idname = "id",
gname = "g",
estimator = "TWFE",
xformla = xformla,
data = data
),
event_study(
yname = "revenue",
tname = "year",
idname = "id",
gname = "g",
estimator = "did2s",
xformla = xformla,
data =data
),
event_study(
yname = "revenue",
tname = "year",
idname = "id",
gname = "g",
estimator = "did",
xformla = xformla,
data = data
)
) %>%
left_join(true_effect, by = "term")
}
#Set number of units and periods
n.units <- 1000
n.periods <- 5
#For reproducibility
set.seed(123)
#Create data for simulation 1
create_data_1 <- function(n.units, n.periods) {
#First column
myData <- as.data.frame(rep(1:n.units, n.periods))
colnames(myData) <- "id"
myData %>%
arrange(by=id) %>%
cbind(year = rep(2019:(2019+n.periods-1),n.units)) %>% #Add periods
group_by(id) %>%
mutate(g = case_when(        #Assign to treatment groups
id %in% (1:n.units/2) ~ 0, #50% untreated
id %in% ((n.units/2+1):(n.units/2+n.units/(n.periods-1)/2)) ~ 2020,
id %in% ((n.units/2+n.units/(n.periods-1)/2+1):(n.units/2+n.units*2/(n.periods-1)/2)) ~ 2021,
id %in% ((n.units/2+n.units*2/(n.periods-1)/2+1):(n.units/2+n.units*3/(n.periods-1)/2)) ~ 2022,
TRUE ~ 2023
),
urban = case_when(g==0 ~ sample(c(0,0,1),1),
TRUE ~ sample(c(0,1,1),1)) # Urban locations twice as likely to be treated
) %>%
rowwise() %>%
mutate(treated = case_when(g<=year & g!=0 ~ 1,
TRUE ~ 0),
revenue = 1000000 + #1M intercept plus:
50000*urban + # additional 50k if in urban area
100000*treated + # treatment effect: 100k
rnorm(n=1, mean =0, sd = 100000) # mean 0 error w/ sd= 100k
)
}
myData <- create_data_1(n.units = n.units, n.periods = n.periods)
View(myData)
#For reproducibility
set.seed(123)
#Create data for simulation 1
create_data_1 <- function(n.units= n.units, n.periods=n.periods) {
#First column
myData <- as.data.frame(rep(1:n.units, n.periods))
colnames(myData) <- "id"
myData %>%
arrange(by=id) %>%
cbind(year = rep(2019:(2019+n.periods-1),n.units)) %>% #Add periods
group_by(id) %>%
mutate(g = case_when(        #Assign to treatment groups
id %in% (1:n.units/2) ~ 0, #50% untreated
id %in% ((n.units/2+1):(n.units/2+n.units/(n.periods-1)/2)) ~ 2020,
id %in% ((n.units/2+n.units/(n.periods-1)/2+1):(n.units/2+n.units*2/(n.periods-1)/2)) ~ 2021,
id %in% ((n.units/2+n.units*2/(n.periods-1)/2+1):(n.units/2+n.units*3/(n.periods-1)/2)) ~ 2022,
TRUE ~ 2023
),
urban = case_when(g==0 ~ sample(c(0,0,1),1),
TRUE ~ sample(c(0,1,1),1)) # Urban locations twice as likely to be treated
) %>%
rowwise() %>%
mutate(treated = case_when(g<=year & g!=0 ~ 1,
TRUE ~ 0),
revenue = 1000000 + #1M intercept plus:
50000*urban + # additional 50k if in urban area
100000*treated + # treatment effect: 100k
rnorm(n=1, mean =0, sd = 100000) # mean 0 error w/ sd= 100k
)
}
myData <- create_data_1()
#For reproducibility
set.seed(123)
#Create data for simulation 1
create_data_1 <- function(n.units= n_units, n.periods=n_periods) {
#First column
myData <- as.data.frame(rep(1:n.units, n.periods))
colnames(myData) <- "id"
myData %>%
arrange(by=id) %>%
cbind(year = rep(2019:(2019+n.periods-1),n.units)) %>% #Add periods
group_by(id) %>%
mutate(g = case_when(        #Assign to treatment groups
id %in% (1:n.units/2) ~ 0, #50% untreated
id %in% ((n.units/2+1):(n.units/2+n.units/(n.periods-1)/2)) ~ 2020,
id %in% ((n.units/2+n.units/(n.periods-1)/2+1):(n.units/2+n.units*2/(n.periods-1)/2)) ~ 2021,
id %in% ((n.units/2+n.units*2/(n.periods-1)/2+1):(n.units/2+n.units*3/(n.periods-1)/2)) ~ 2022,
TRUE ~ 2023
),
urban = case_when(g==0 ~ sample(c(0,0,1),1),
TRUE ~ sample(c(0,1,1),1)) # Urban locations twice as likely to be treated
) %>%
rowwise() %>%
mutate(treated = case_when(g<=year & g!=0 ~ 1,
TRUE ~ 0),
revenue = 1000000 + #1M intercept plus:
50000*urban + # additional 50k if in urban area
100000*treated + # treatment effect: 100k
rnorm(n=1, mean =0, sd = 100000) # mean 0 error w/ sd= 100k
)
}
myData <- create_data_1()
#Set number of units and periods
n_units <- 1000
n_periods <- 5
#For reproducibility
set.seed(123)
#Create data for simulation 1
create_data_1 <- function(n.units= n_units, n.periods=n_periods) {
#First column
myData <- as.data.frame(rep(1:n.units, n.periods))
colnames(myData) <- "id"
myData %>%
arrange(by=id) %>%
cbind(year = rep(2019:(2019+n.periods-1),n.units)) %>% #Add periods
group_by(id) %>%
mutate(g = case_when(        #Assign to treatment groups
id %in% (1:n.units/2) ~ 0, #50% untreated
id %in% ((n.units/2+1):(n.units/2+n.units/(n.periods-1)/2)) ~ 2020,
id %in% ((n.units/2+n.units/(n.periods-1)/2+1):(n.units/2+n.units*2/(n.periods-1)/2)) ~ 2021,
id %in% ((n.units/2+n.units*2/(n.periods-1)/2+1):(n.units/2+n.units*3/(n.periods-1)/2)) ~ 2022,
TRUE ~ 2023
),
urban = case_when(g==0 ~ sample(c(0,0,1),1),
TRUE ~ sample(c(0,1,1),1)) # Urban locations twice as likely to be treated
) %>%
rowwise() %>%
mutate(treated = case_when(g<=year & g!=0 ~ 1,
TRUE ~ 0),
revenue = 1000000 + #1M intercept plus:
50000*urban + # additional 50k if in urban area
100000*treated + # treatment effect: 100k
rnorm(n=1, mean =0, sd = 100000) # mean 0 error w/ sd= 100k
)
}
myData <- create_data_1()
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
get_est_1 <- function() {
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
return(output)
}
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
get_est_1 <- function() {
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
return(output)
}
output <- get_est_1()
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
output <- map_dfr(1:3,get_est_1())
output <- map_dfr(1:3,get_est_1)
get_est_1 <- function() {
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
output
}
output <- map_dfr(1:3,get_est_1)
output <- my_event_study(myData, true_effect = true_effect)
View(output)
test <- get_est_1()
View(test)
get_est_1 <- function() {
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
test <- get_est_1()
output <- map_dfr(1:3,get_est_1)
output <- map_dfr(1:3, get_est_1())
output <- map2_dfr(1:3, get_est_1())
?map2_dfr
output <- map2_dfr(.x=1:3, .f=get_est_1())
output <- map2_dfr(.x=1:3, .f=get_est_1)
output <- map_dfr(.x=1:3, .f=get_est_1)
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
get_est_1 <- function(...) {
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
test <- get_est_1()
output <- map_dfr(1:3, get_est_1)
View(output)
### To do:
# Look into using map_dfr to bind multiple runs of the sim together
# Make own plotting function. Would include using summarise to average across sim runs
# Treatment that 'turns off'
#Clear memory
rm(list = ls(all=T))
#Load packages and install if not installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,  # Grammar for data + ggplot2
did,        # Callaway and Sant'Anna
did2s,      # Gardner
data.table, # easy to make data tables
knitr       # Print pretty tables
)
#Set some output options
knitr::opts_chunk$set(include = TRUE, warning = FALSE, message = FALSE,
fig.width = 10, fig.height = 7)
my_event_study <- function(data, xformla = NULL, true_effect) {
rbind(
event_study(
yname = "revenue",
tname = "year",
idname = "id",
gname = "g",
estimator = "TWFE",
xformla = xformla,
data = data
),
event_study(
yname = "revenue",
tname = "year",
idname = "id",
gname = "g",
estimator = "did2s",
xformla = xformla,
data =data
),
event_study(
yname = "revenue",
tname = "year",
idname = "id",
gname = "g",
estimator = "did",
xformla = xformla,
data = data
)
) %>%
left_join(true_effect, by = "term")
}
#Set number of units and periods
n_units <- 1000
n_periods <- 5
#For reproducibility
set.seed(123)
#Create data for simulation 1
create_data_1 <- function(n.units= n_units, n.periods=n_periods) {
#First column
myData <- as.data.frame(rep(1:n.units, n.periods))
colnames(myData) <- "id"
myData %>%
arrange(by=id) %>%
cbind(year = rep(2019:(2019+n.periods-1),n.units)) %>% #Add periods
group_by(id) %>%
mutate(g = case_when(        #Assign to treatment groups
id %in% (1:n.units/2) ~ 0, #50% untreated
id %in% ((n.units/2+1):(n.units/2+n.units/(n.periods-1)/2)) ~ 2020,
id %in% ((n.units/2+n.units/(n.periods-1)/2+1):(n.units/2+n.units*2/(n.periods-1)/2)) ~ 2021,
id %in% ((n.units/2+n.units*2/(n.periods-1)/2+1):(n.units/2+n.units*3/(n.periods-1)/2)) ~ 2022,
TRUE ~ 2023
),
urban = case_when(g==0 ~ sample(c(0,0,1),1),
TRUE ~ sample(c(0,1,1),1)) # Urban locations twice as likely to be treated
) %>%
rowwise() %>%
mutate(treated = case_when(g<=year & g!=0 ~ 1,
TRUE ~ 0),
revenue = 1000000 + #1M intercept plus:
50000*urban + # additional 50k if in urban area
100000*treated + # treatment effect: 100k
rnorm(n=1, mean =0, sd = 100000) # mean 0 error w/ sd= 100k
)
}
myData <- create_data_1()
## A glimpse of the data ##
#Filter down to the five observations for one treated individual
myData %>%
ungroup() %>%
filter(g==0, urban == 0)%>%
slice_head(n=5) %>%
#Stack on top of five obs for one untreated individual
rbind(
#Filter down to the five observations for one individual treated in 2017
myData %>%
ungroup() %>%
filter(g==2021, urban==1)%>%
slice_head(n=5)
) %>%
mutate(revenue = scales::dollar(revenue)) %>%
#Print as a table
kable(
align = "l",
caption = "Data for One Store That Adopts the Technology and One that Does Not",
col.names = c("ID","Year","Treatment Group","Urban Dummy","Treated Yet", "Revenue")
)
myData %>%
group_by(treated, urban) %>%
summarise(Revenue = mean(revenue) %>% scales::dollar()) %>%
kable(
align = "l",
caption = "Mean Revenue by Treatment Status and Whether Stores are Urban",
col.names = c("Treated","Urban Dummy", "Mean Revenue")
)
myData %>%
group_by(g, urban) %>%
summarise(Count = n()) %>%
kable(
align = "l",
caption = "Unit-Period Observations in Each Treatment Group by Urban Dummy ",
col.names = c("Treatment Group", "Urban Dummy", "Count")
)
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
get_est_1 <- function(...) { #... must be included for map_dfr to work
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
test <- get_est_1()
output <- map_dfr(1:3, get_est_1) #works
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
View(output)
output <- map_dfr(1:3, get_est_1) %>%
group_by(term, estimator) %>%
summarise(across(everything(), mean))
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
#Set number of units, periods and simulations
n_units <- 1000
n_periods <- 5
n_sim <- 10
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
#A function to run a simulation 1 time and run estimators
get_est_1 <- function(...) { # '...' must be included for map_dfr to work
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
test <- get_est_1()
#Run simulation multiple times & save mean output.
output <- map_dfr(1:nsim, get_est_1) %>%
group_by(term, estimator) %>%
summarise(across(everything(), mean))
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
#A function to run a simulation 1 time and run estimators
get_est_1 <- function(...) { # '...' must be included for map_dfr to work
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
test <- get_est_1()
#Run simulation multiple times & save mean output.
output <- map_dfr(1:n_sim, get_est_1) %>%
group_by(term, estimator) %>%
summarise(across(everything(), mean))
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
#Set number of units, periods and simulations
n_units <- 2000
n_periods <- 5
n_sim <- 10
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
#A function to run a simulation 1 time and run estimators
get_est_1 <- function(...) { # '...' must be included for map_dfr to work
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
test <- get_est_1()
#Run simulation multiple times & save mean output.
output <- map_dfr(1:n_sim, get_est_1) %>%
group_by(term, estimator) %>%
summarise(across(everything(), mean))
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
#Set number of units, periods and simulations
n_units <- 2000
n_periods <- 5
n_sim <- 25
#Save true effect
true_effect <- data.table(
term = -4:3,
true_effect = c(rep(0,4),rep(100000,4))
)
#A function to run a simulation 1 time and run estimators
get_est_1 <- function(...) { # '...' must be included for map_dfr to work
myData <- create_data_1()
#Run our three estimators
output <- my_event_study(myData, true_effect = true_effect)
as.data.frame(output)
}
#For reproducibility
set.seed(123)
#Run simulation multiple times & save mean output.
output <- map_dfr(1:n_sim, get_est_1) %>%
group_by(term, estimator) %>%
summarise(across(everything(), mean))
#Plot the estimates
plot_event_study(output) +
geom_line(aes(x = term, y=true_effect), color = "red")
